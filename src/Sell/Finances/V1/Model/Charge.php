<?php

/**
 * This file is part of the brandon14/ebay-sdk-php package.
 *
 * MIT License
 *
 * Copyright (c) 2022 Brandon Clothier
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

declare(strict_types=1);

/**
 * Charge.
 *
 * PHP version ^7.2 || ^8.0
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * eBay Finances API.
 *
 * This API is used to retrieve seller payouts and monetary transaction details related to those payouts.
 *
 * The version of the OpenAPI document: 1.9.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TNT\Ebay\Sell\Finances\V1\Model;

use ArrayAccess;
use TNT\Ebay\Sell\Finances\V1\ObjectSerializer;

/**
 * Charge Class Doc Comment.
 *
 * @category Class
 * @description This type is used by the &lt;b&gt;charge&lt;/b&gt; container, which is an array of one or more charges related to the transfer.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Charge implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Charge';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'cancellation_id' => 'string',
        'case_id' => 'string',
        'charge_net_amount' => '\TNT\Ebay\Sell\Finances\V1\Model\Amount',
        'inquiry_id' => 'string',
        'order_id' => 'string',
        'payment_dispute_id' => 'string',
        'refund_id' => 'string',
        'return_id' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'cancellation_id' => null,
        'case_id' => null,
        'charge_net_amount' => null,
        'inquiry_id' => null,
        'order_id' => null,
        'payment_dispute_id' => null,
        'refund_id' => null,
        'return_id' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cancellation_id' => 'cancellationId',
        'case_id' => 'caseId',
        'charge_net_amount' => 'chargeNetAmount',
        'inquiry_id' => 'inquiryId',
        'order_id' => 'orderId',
        'payment_dispute_id' => 'paymentDisputeId',
        'refund_id' => 'refundId',
        'return_id' => 'returnId',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'cancellation_id' => 'setCancellationId',
        'case_id' => 'setCaseId',
        'charge_net_amount' => 'setChargeNetAmount',
        'inquiry_id' => 'setInquiryId',
        'order_id' => 'setOrderId',
        'payment_dispute_id' => 'setPaymentDisputeId',
        'refund_id' => 'setRefundId',
        'return_id' => 'setReturnId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'cancellation_id' => 'getCancellationId',
        'case_id' => 'getCaseId',
        'charge_net_amount' => 'getChargeNetAmount',
        'inquiry_id' => 'getInquiryId',
        'order_id' => 'getOrderId',
        'payment_dispute_id' => 'getPaymentDisputeId',
        'refund_id' => 'getRefundId',
        'return_id' => 'getReturnId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cancellation_id'] = $data['cancellation_id'] ?? null;
        $this->container['case_id'] = $data['case_id'] ?? null;
        $this->container['charge_net_amount'] = $data['charge_net_amount'] ?? null;
        $this->container['inquiry_id'] = $data['inquiry_id'] ?? null;
        $this->container['order_id'] = $data['order_id'] ?? null;
        $this->container['payment_dispute_id'] = $data['payment_dispute_id'] ?? null;
        $this->container['refund_id'] = $data['refund_id'] ?? null;
        $this->container['return_id'] = $data['return_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets cancellation_id.
     *
     * @return string|null
     */
    public function getCancellationId()
    {
        return $this->container['cancellation_id'];
    }

    /**
     * Sets cancellation_id.
     *
     * @param string|null $cancellation_id The unique identifier of an order cancellation. This field is only applicable and returned if the charge is related to an order  cancellation.
     *
     * @return self
     */
    public function setCancellationId($cancellation_id)
    {
        $this->container['cancellation_id'] = $cancellation_id;

        return $this;
    }

    /**
     * Gets case_id.
     *
     * @return string|null
     */
    public function getCaseId()
    {
        return $this->container['case_id'];
    }

    /**
     * Sets case_id.
     *
     * @param string|null $case_id The unique identifier of a case filed against an order. This field is only applicable and returned if the charge is related to a case filed against an order.
     *
     * @return self
     */
    public function setCaseId($case_id)
    {
        $this->container['case_id'] = $case_id;

        return $this;
    }

    /**
     * Gets charge_net_amount.
     *
     * @return \TNT\Ebay\Sell\Finances\V1\Model\Amount|null
     */
    public function getChargeNetAmount()
    {
        return $this->container['charge_net_amount'];
    }

    /**
     * Sets charge_net_amount.
     *
     * @param \TNT\Ebay\Sell\Finances\V1\Model\Amount|null $charge_net_amount charge_net_amount
     *
     * @return self
     */
    public function setChargeNetAmount($charge_net_amount)
    {
        $this->container['charge_net_amount'] = $charge_net_amount;

        return $this;
    }

    /**
     * Gets inquiry_id.
     *
     * @return string|null
     */
    public function getInquiryId()
    {
        return $this->container['inquiry_id'];
    }

    /**
     * Sets inquiry_id.
     *
     * @param string|null $inquiry_id The unique identifier of an Item Not Received (INR) inquiry filed against an order. This field is only applicable and returned if the charge is related to has an INR inquiry filed against the order.
     *
     * @return self
     */
    public function setInquiryId($inquiry_id)
    {
        $this->container['inquiry_id'] = $inquiry_id;

        return $this;
    }

    /**
     * Gets order_id.
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id.
     *
     * @param string|null $order_id the unique identifier of the order that is associated with the charge
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets payment_dispute_id.
     *
     * @return string|null
     */
    public function getPaymentDisputeId()
    {
        return $this->container['payment_dispute_id'];
    }

    /**
     * Sets payment_dispute_id.
     *
     * @param string|null $payment_dispute_id The unique identifier of a third-party payment dispute filed against an order. This occurs when the buyer files a dispute against the order with their payment provider, and then the dispute comes into eBay's system. This field is only applicable and returned if the charge is related to a third-party payment dispute filed against an order.
     *
     * @return self
     */
    public function setPaymentDisputeId($payment_dispute_id)
    {
        $this->container['payment_dispute_id'] = $payment_dispute_id;

        return $this;
    }

    /**
     * Gets refund_id.
     *
     * @return string|null
     */
    public function getRefundId()
    {
        return $this->container['refund_id'];
    }

    /**
     * Sets refund_id.
     *
     * @param string|null $refund_id the unique identifier of a buyer refund associated with the charge
     *
     * @return self
     */
    public function setRefundId($refund_id)
    {
        $this->container['refund_id'] = $refund_id;

        return $this;
    }

    /**
     * Gets return_id.
     *
     * @return string|null
     */
    public function getReturnId()
    {
        return $this->container['return_id'];
    }

    /**
     * Sets return_id.
     *
     * @param string|null $return_id The unique identifier of an order return. This field is only applicable and returned if the charge is related to an order that was returned by the buyer.
     *
     * @return self
     */
    public function setReturnId($return_id)
    {
        $this->container['return_id'] = $return_id;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
