<?php

/**
 * This file is part of the trollandtoad/ebay-sdk-php package.
 *
 * MIT License
 *
 * Copyright (c) 2022 Brandon Clothier
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

declare(strict_types=1);

/**
 * ReturnPolicyDetails.
 *
 * PHP version ^7.2 || ^8.0
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Metadata API.
 *
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TNT\Ebay\Sell\Metadata\V1\Model;

use TNT\Ebay\Sell\Metadata\V1\ObjectSerializer;

/**
 * ReturnPolicyDetails Class Doc Comment.
 *
 * @category Class
 *
 * @description This container defines the category policies that relate to domestic and international return policies (the return shipping is made via a domestic or an international shipping service, respectively).
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ReturnPolicyDetails implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'ReturnPolicyDetails';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'policy_description_enabled' => 'bool',
        'refund_methods' => 'string[]',
        'return_methods' => 'string[]',
        'return_periods' => '\TNT\Ebay\Sell\Metadata\V1\Model\TimeDuration[]',
        'returns_acceptance_enabled' => 'bool',
        'return_shipping_cost_payers' => 'string[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'policy_description_enabled' => null,
        'refund_methods' => null,
        'return_methods' => null,
        'return_periods' => null,
        'returns_acceptance_enabled' => null,
        'return_shipping_cost_payers' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'policy_description_enabled' => 'policyDescriptionEnabled',
        'refund_methods' => 'refundMethods',
        'return_methods' => 'returnMethods',
        'return_periods' => 'returnPeriods',
        'returns_acceptance_enabled' => 'returnsAcceptanceEnabled',
        'return_shipping_cost_payers' => 'returnShippingCostPayers',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'policy_description_enabled' => 'setPolicyDescriptionEnabled',
        'refund_methods' => 'setRefundMethods',
        'return_methods' => 'setReturnMethods',
        'return_periods' => 'setReturnPeriods',
        'returns_acceptance_enabled' => 'setReturnsAcceptanceEnabled',
        'return_shipping_cost_payers' => 'setReturnShippingCostPayers',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'policy_description_enabled' => 'getPolicyDescriptionEnabled',
        'refund_methods' => 'getRefundMethods',
        'return_methods' => 'getReturnMethods',
        'return_periods' => 'getReturnPeriods',
        'returns_acceptance_enabled' => 'getReturnsAcceptanceEnabled',
        'return_shipping_cost_payers' => 'getReturnShippingCostPayers',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['policy_description_enabled'] = $data['policy_description_enabled'] ?? null;
        $this->container['refund_methods'] = $data['refund_methods'] ?? null;
        $this->container['return_methods'] = $data['return_methods'] ?? null;
        $this->container['return_periods'] = $data['return_periods'] ?? null;
        $this->container['returns_acceptance_enabled'] = $data['returns_acceptance_enabled'] ?? null;
        $this->container['return_shipping_cost_payers'] = $data['return_shipping_cost_payers'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets policy_description_enabled.
     *
     * @return bool|null
     */
    public function getPolicyDescriptionEnabled()
    {
        return $this->container['policy_description_enabled'];
    }

    /**
     * Sets policy_description_enabled.
     *
     * @param bool|null $policy_description_enabled If set to <code>true</code>, this flag indicates you can supply a detailed return policy description within your return policy (for example, by populating the <b>returnInstructions</b> field in the Account API's <b>createReturnPolicy</b>). User-supplied return policy details are allowed only in the DE, ES, FR, and IT marketplaces.
     *
     * @return self
     */
    public function setPolicyDescriptionEnabled($policy_description_enabled)
    {
        $this->container['policy_description_enabled'] = $policy_description_enabled;

        return $this;
    }

    /**
     * Gets refund_methods.
     *
     * @return string[]|null
     */
    public function getRefundMethods()
    {
        return $this->container['refund_methods'];
    }

    /**
     * Sets refund_methods.
     *
     * @param string[]|null $refund_methods a list of refund methods allowed for the associated category
     *
     * @return self
     */
    public function setRefundMethods($refund_methods)
    {
        $this->container['refund_methods'] = $refund_methods;

        return $this;
    }

    /**
     * Gets return_methods.
     *
     * @return string[]|null
     */
    public function getReturnMethods()
    {
        return $this->container['return_methods'];
    }

    /**
     * Sets return_methods.
     *
     * @param string[]|null $return_methods a list of return methods allowed for the associated category
     *
     * @return self
     */
    public function setReturnMethods($return_methods)
    {
        $this->container['return_methods'] = $return_methods;

        return $this;
    }

    /**
     * Gets return_periods.
     *
     * @return \TNT\Ebay\Sell\Metadata\V1\Model\TimeDuration[]|null
     */
    public function getReturnPeriods()
    {
        return $this->container['return_periods'];
    }

    /**
     * Sets return_periods.
     *
     * @param \TNT\Ebay\Sell\Metadata\V1\Model\TimeDuration[]|null $return_periods A list of return periods allowed for the associated category.  <br><br>Note that different APIs require you to enter the return period in different ways. For example, the Account API uses the complex <b>TimeDuration</b> type, which takes two values (a <b>unit</b> and a <b>value</b>), whereas the Trading API takes a single value (such as <code>Days_30</code>).
     *
     * @return self
     */
    public function setReturnPeriods($return_periods)
    {
        $this->container['return_periods'] = $return_periods;

        return $this;
    }

    /**
     * Gets returns_acceptance_enabled.
     *
     * @return bool|null
     */
    public function getReturnsAcceptanceEnabled()
    {
        return $this->container['returns_acceptance_enabled'];
    }

    /**
     * Sets returns_acceptance_enabled.
     *
     * @param bool|null $returns_acceptance_enabled if set to <code>true</code>, this flag indicates the seller can configure how they handle domestic returns
     *
     * @return self
     */
    public function setReturnsAcceptanceEnabled($returns_acceptance_enabled)
    {
        $this->container['returns_acceptance_enabled'] = $returns_acceptance_enabled;

        return $this;
    }

    /**
     * Gets return_shipping_cost_payers.
     *
     * @return string[]|null
     */
    public function getReturnShippingCostPayers()
    {
        return $this->container['return_shipping_cost_payers'];
    }

    /**
     * Sets return_shipping_cost_payers.
     *
     * @param string[]|null $return_shipping_cost_payers A list of allowed values for who pays for the return shipping cost.  <br><br>Note that for SNAD returns, the seller is always responsible for the return shipping cost.
     *
     * @return self
     */
    public function setReturnShippingCostPayers($return_shipping_cost_payers)
    {
        $this->container['return_shipping_cost_payers'] = $return_shipping_cost_payers;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
