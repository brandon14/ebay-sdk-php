<?php

/**
 * This file is part of the brandon14/ebay-sdk-php package.
 *
 * MIT License
 *
 * Copyright (c) 2022 Brandon Clothier
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

declare(strict_types=1);

/**
 * TransactionSummaryResponse.
 *
 * PHP version ^7.2 || ^8.0
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * eBay Finances API.
 *
 * This API is used to retrieve seller payouts and monetary transaction details related to those payouts.
 *
 * The version of the OpenAPI document: 1.9.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TNT\Ebay\Sell\Finances\V1\Model;

use ArrayAccess;
use TNT\Ebay\Sell\Finances\V1\ObjectSerializer;

/**
 * TransactionSummaryResponse Class Doc Comment.
 *
 * @category Class
 * @description This type is the base response type of the &lt;strong&gt;getTransactionSummary&lt;/strong&gt; method, and based on the filters that are used in the &lt;strong&gt;getTransactionSummary&lt;/strong&gt; call URI, the response may include  total count and amount of the seller&#39;s sales and credits, total count and amount of buyer refunds, and total count and amount of seller payment holds.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionSummaryResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'TransactionSummaryResponse';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'adjustment_amount' => '\TNT\Ebay\Sell\Finances\V1\Model\Amount',
        'adjustment_booking_entry' => 'string',
        'adjustment_count' => 'int',
        'balance_transfer_amount' => '\TNT\Ebay\Sell\Finances\V1\Model\Amount',
        'balance_transfer_booking_entry' => 'string',
        'balance_transfer_count' => 'int',
        'credit_amount' => '\TNT\Ebay\Sell\Finances\V1\Model\Amount',
        'credit_booking_entry' => 'string',
        'credit_count' => 'int',
        'dispute_amount' => '\TNT\Ebay\Sell\Finances\V1\Model\Amount',
        'dispute_booking_entry' => 'string',
        'dispute_count' => 'int',
        'non_sale_charge_amount' => '\TNT\Ebay\Sell\Finances\V1\Model\Amount',
        'non_sale_charge_booking_entry' => 'string',
        'non_sale_charge_count' => 'int',
        'on_hold_amount' => '\TNT\Ebay\Sell\Finances\V1\Model\Amount',
        'on_hold_booking_entry' => 'string',
        'on_hold_count' => 'int',
        'refund_amount' => '\TNT\Ebay\Sell\Finances\V1\Model\Amount',
        'refund_booking_entry' => 'string',
        'refund_count' => 'int',
        'shipping_label_amount' => '\TNT\Ebay\Sell\Finances\V1\Model\Amount',
        'shipping_label_booking_entry' => 'string',
        'shipping_label_count' => 'int',
        'transfer_amount' => '\TNT\Ebay\Sell\Finances\V1\Model\Amount',
        'transfer_booking_entry' => 'string',
        'transfer_count' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'adjustment_amount' => null,
        'adjustment_booking_entry' => null,
        'adjustment_count' => 'int32',
        'balance_transfer_amount' => null,
        'balance_transfer_booking_entry' => null,
        'balance_transfer_count' => 'int32',
        'credit_amount' => null,
        'credit_booking_entry' => null,
        'credit_count' => 'int32',
        'dispute_amount' => null,
        'dispute_booking_entry' => null,
        'dispute_count' => 'int32',
        'non_sale_charge_amount' => null,
        'non_sale_charge_booking_entry' => null,
        'non_sale_charge_count' => 'int32',
        'on_hold_amount' => null,
        'on_hold_booking_entry' => null,
        'on_hold_count' => 'int32',
        'refund_amount' => null,
        'refund_booking_entry' => null,
        'refund_count' => 'int32',
        'shipping_label_amount' => null,
        'shipping_label_booking_entry' => null,
        'shipping_label_count' => 'int32',
        'transfer_amount' => null,
        'transfer_booking_entry' => null,
        'transfer_count' => 'int32',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adjustment_amount' => 'adjustmentAmount',
        'adjustment_booking_entry' => 'adjustmentBookingEntry',
        'adjustment_count' => 'adjustmentCount',
        'balance_transfer_amount' => 'balanceTransferAmount',
        'balance_transfer_booking_entry' => 'balanceTransferBookingEntry',
        'balance_transfer_count' => 'balanceTransferCount',
        'credit_amount' => 'creditAmount',
        'credit_booking_entry' => 'creditBookingEntry',
        'credit_count' => 'creditCount',
        'dispute_amount' => 'disputeAmount',
        'dispute_booking_entry' => 'disputeBookingEntry',
        'dispute_count' => 'disputeCount',
        'non_sale_charge_amount' => 'nonSaleChargeAmount',
        'non_sale_charge_booking_entry' => 'nonSaleChargeBookingEntry',
        'non_sale_charge_count' => 'nonSaleChargeCount',
        'on_hold_amount' => 'onHoldAmount',
        'on_hold_booking_entry' => 'onHoldBookingEntry',
        'on_hold_count' => 'onHoldCount',
        'refund_amount' => 'refundAmount',
        'refund_booking_entry' => 'refundBookingEntry',
        'refund_count' => 'refundCount',
        'shipping_label_amount' => 'shippingLabelAmount',
        'shipping_label_booking_entry' => 'shippingLabelBookingEntry',
        'shipping_label_count' => 'shippingLabelCount',
        'transfer_amount' => 'transferAmount',
        'transfer_booking_entry' => 'transferBookingEntry',
        'transfer_count' => 'transferCount',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'adjustment_amount' => 'setAdjustmentAmount',
        'adjustment_booking_entry' => 'setAdjustmentBookingEntry',
        'adjustment_count' => 'setAdjustmentCount',
        'balance_transfer_amount' => 'setBalanceTransferAmount',
        'balance_transfer_booking_entry' => 'setBalanceTransferBookingEntry',
        'balance_transfer_count' => 'setBalanceTransferCount',
        'credit_amount' => 'setCreditAmount',
        'credit_booking_entry' => 'setCreditBookingEntry',
        'credit_count' => 'setCreditCount',
        'dispute_amount' => 'setDisputeAmount',
        'dispute_booking_entry' => 'setDisputeBookingEntry',
        'dispute_count' => 'setDisputeCount',
        'non_sale_charge_amount' => 'setNonSaleChargeAmount',
        'non_sale_charge_booking_entry' => 'setNonSaleChargeBookingEntry',
        'non_sale_charge_count' => 'setNonSaleChargeCount',
        'on_hold_amount' => 'setOnHoldAmount',
        'on_hold_booking_entry' => 'setOnHoldBookingEntry',
        'on_hold_count' => 'setOnHoldCount',
        'refund_amount' => 'setRefundAmount',
        'refund_booking_entry' => 'setRefundBookingEntry',
        'refund_count' => 'setRefundCount',
        'shipping_label_amount' => 'setShippingLabelAmount',
        'shipping_label_booking_entry' => 'setShippingLabelBookingEntry',
        'shipping_label_count' => 'setShippingLabelCount',
        'transfer_amount' => 'setTransferAmount',
        'transfer_booking_entry' => 'setTransferBookingEntry',
        'transfer_count' => 'setTransferCount',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'adjustment_amount' => 'getAdjustmentAmount',
        'adjustment_booking_entry' => 'getAdjustmentBookingEntry',
        'adjustment_count' => 'getAdjustmentCount',
        'balance_transfer_amount' => 'getBalanceTransferAmount',
        'balance_transfer_booking_entry' => 'getBalanceTransferBookingEntry',
        'balance_transfer_count' => 'getBalanceTransferCount',
        'credit_amount' => 'getCreditAmount',
        'credit_booking_entry' => 'getCreditBookingEntry',
        'credit_count' => 'getCreditCount',
        'dispute_amount' => 'getDisputeAmount',
        'dispute_booking_entry' => 'getDisputeBookingEntry',
        'dispute_count' => 'getDisputeCount',
        'non_sale_charge_amount' => 'getNonSaleChargeAmount',
        'non_sale_charge_booking_entry' => 'getNonSaleChargeBookingEntry',
        'non_sale_charge_count' => 'getNonSaleChargeCount',
        'on_hold_amount' => 'getOnHoldAmount',
        'on_hold_booking_entry' => 'getOnHoldBookingEntry',
        'on_hold_count' => 'getOnHoldCount',
        'refund_amount' => 'getRefundAmount',
        'refund_booking_entry' => 'getRefundBookingEntry',
        'refund_count' => 'getRefundCount',
        'shipping_label_amount' => 'getShippingLabelAmount',
        'shipping_label_booking_entry' => 'getShippingLabelBookingEntry',
        'shipping_label_count' => 'getShippingLabelCount',
        'transfer_amount' => 'getTransferAmount',
        'transfer_booking_entry' => 'getTransferBookingEntry',
        'transfer_count' => 'getTransferCount',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adjustment_amount'] = $data['adjustment_amount'] ?? null;
        $this->container['adjustment_booking_entry'] = $data['adjustment_booking_entry'] ?? null;
        $this->container['adjustment_count'] = $data['adjustment_count'] ?? null;
        $this->container['balance_transfer_amount'] = $data['balance_transfer_amount'] ?? null;
        $this->container['balance_transfer_booking_entry'] = $data['balance_transfer_booking_entry'] ?? null;
        $this->container['balance_transfer_count'] = $data['balance_transfer_count'] ?? null;
        $this->container['credit_amount'] = $data['credit_amount'] ?? null;
        $this->container['credit_booking_entry'] = $data['credit_booking_entry'] ?? null;
        $this->container['credit_count'] = $data['credit_count'] ?? null;
        $this->container['dispute_amount'] = $data['dispute_amount'] ?? null;
        $this->container['dispute_booking_entry'] = $data['dispute_booking_entry'] ?? null;
        $this->container['dispute_count'] = $data['dispute_count'] ?? null;
        $this->container['non_sale_charge_amount'] = $data['non_sale_charge_amount'] ?? null;
        $this->container['non_sale_charge_booking_entry'] = $data['non_sale_charge_booking_entry'] ?? null;
        $this->container['non_sale_charge_count'] = $data['non_sale_charge_count'] ?? null;
        $this->container['on_hold_amount'] = $data['on_hold_amount'] ?? null;
        $this->container['on_hold_booking_entry'] = $data['on_hold_booking_entry'] ?? null;
        $this->container['on_hold_count'] = $data['on_hold_count'] ?? null;
        $this->container['refund_amount'] = $data['refund_amount'] ?? null;
        $this->container['refund_booking_entry'] = $data['refund_booking_entry'] ?? null;
        $this->container['refund_count'] = $data['refund_count'] ?? null;
        $this->container['shipping_label_amount'] = $data['shipping_label_amount'] ?? null;
        $this->container['shipping_label_booking_entry'] = $data['shipping_label_booking_entry'] ?? null;
        $this->container['shipping_label_count'] = $data['shipping_label_count'] ?? null;
        $this->container['transfer_amount'] = $data['transfer_amount'] ?? null;
        $this->container['transfer_booking_entry'] = $data['transfer_booking_entry'] ?? null;
        $this->container['transfer_count'] = $data['transfer_count'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets adjustment_amount.
     *
     * @return \TNT\Ebay\Sell\Finances\V1\Model\Amount|null
     */
    public function getAdjustmentAmount()
    {
        return $this->container['adjustment_amount'];
    }

    /**
     * Sets adjustment_amount.
     *
     * @param \TNT\Ebay\Sell\Finances\V1\Model\Amount|null $adjustment_amount adjustment_amount
     *
     * @return self
     */
    public function setAdjustmentAmount($adjustment_amount)
    {
        $this->container['adjustment_amount'] = $adjustment_amount;

        return $this;
    }

    /**
     * Gets adjustment_booking_entry.
     *
     * @return string|null
     */
    public function getAdjustmentBookingEntry()
    {
        return $this->container['adjustment_booking_entry'];
    }

    /**
     * Sets adjustment_booking_entry.
     *
     * @param string|null $adjustment_booking_entry The credit debit sign indicator for adjustment. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setAdjustmentBookingEntry($adjustment_booking_entry)
    {
        $this->container['adjustment_booking_entry'] = $adjustment_booking_entry;

        return $this;
    }

    /**
     * Gets adjustment_count.
     *
     * @return int|null
     */
    public function getAdjustmentCount()
    {
        return $this->container['adjustment_count'];
    }

    /**
     * Sets adjustment_count.
     *
     * @param int|null $adjustment_count total adjustment count for given payee within a specified period
     *
     * @return self
     */
    public function setAdjustmentCount($adjustment_count)
    {
        $this->container['adjustment_count'] = $adjustment_count;

        return $this;
    }

    /**
     * Gets balance_transfer_amount.
     *
     * @return \TNT\Ebay\Sell\Finances\V1\Model\Amount|null
     */
    public function getBalanceTransferAmount()
    {
        return $this->container['balance_transfer_amount'];
    }

    /**
     * Sets balance_transfer_amount.
     *
     * @param \TNT\Ebay\Sell\Finances\V1\Model\Amount|null $balance_transfer_amount balance_transfer_amount
     *
     * @return self
     */
    public function setBalanceTransferAmount($balance_transfer_amount)
    {
        $this->container['balance_transfer_amount'] = $balance_transfer_amount;

        return $this;
    }

    /**
     * Gets balance_transfer_booking_entry.
     *
     * @return string|null
     */
    public function getBalanceTransferBookingEntry()
    {
        return $this->container['balance_transfer_booking_entry'];
    }

    /**
     * Sets balance_transfer_booking_entry.
     *
     * @param string|null $balance_transfer_booking_entry The credit debit sign indicator for the balance transfer. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setBalanceTransferBookingEntry($balance_transfer_booking_entry)
    {
        $this->container['balance_transfer_booking_entry'] = $balance_transfer_booking_entry;

        return $this;
    }

    /**
     * Gets balance_transfer_count.
     *
     * @return int|null
     */
    public function getBalanceTransferCount()
    {
        return $this->container['balance_transfer_count'];
    }

    /**
     * Sets balance_transfer_count.
     *
     * @param int|null $balance_transfer_count the total balance transfer count for given payee within the specified period
     *
     * @return self
     */
    public function setBalanceTransferCount($balance_transfer_count)
    {
        $this->container['balance_transfer_count'] = $balance_transfer_count;

        return $this;
    }

    /**
     * Gets credit_amount.
     *
     * @return \TNT\Ebay\Sell\Finances\V1\Model\Amount|null
     */
    public function getCreditAmount()
    {
        return $this->container['credit_amount'];
    }

    /**
     * Sets credit_amount.
     *
     * @param \TNT\Ebay\Sell\Finances\V1\Model\Amount|null $credit_amount credit_amount
     *
     * @return self
     */
    public function setCreditAmount($credit_amount)
    {
        $this->container['credit_amount'] = $credit_amount;

        return $this;
    }

    /**
     * Gets credit_booking_entry.
     *
     * @return string|null
     */
    public function getCreditBookingEntry()
    {
        return $this->container['credit_booking_entry'];
    }

    /**
     * Sets credit_booking_entry.
     *
     * @param string|null $credit_booking_entry The enumeration value indicates whether the dollar amount in the <strong>creditAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>CREDIT</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setCreditBookingEntry($credit_booking_entry)
    {
        $this->container['credit_booking_entry'] = $credit_booking_entry;

        return $this;
    }

    /**
     * Gets credit_count.
     *
     * @return int|null
     */
    public function getCreditCount()
    {
        return $this->container['credit_count'];
    }

    /**
     * Sets credit_count.
     *
     * @param int|null $credit_count This integer value indicates the total number of the seller's sales and/or credits that match the input criteria. <br/><br/><span class=\"tablenote\"><strong>Note:</strong> Unless the <b>transactionType</b> filter is used in the request to retrieve a specific type of monetary transaction (sale, buyer refund, or seller credit), the <b>creditCount</b> and <b>creditAmount</b> fields account for both order sales and seller credits (the count and value is not distinguished between the two monetary transaction types).</span><br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to either <code>REFUND</code>, <code>DISPUTE</code>, or <code>SHIPPING_LABEL</code>.
     *
     * @return self
     */
    public function setCreditCount($credit_count)
    {
        $this->container['credit_count'] = $credit_count;

        return $this;
    }

    /**
     * Gets dispute_amount.
     *
     * @return \TNT\Ebay\Sell\Finances\V1\Model\Amount|null
     */
    public function getDisputeAmount()
    {
        return $this->container['dispute_amount'];
    }

    /**
     * Sets dispute_amount.
     *
     * @param \TNT\Ebay\Sell\Finances\V1\Model\Amount|null $dispute_amount dispute_amount
     *
     * @return self
     */
    public function setDisputeAmount($dispute_amount)
    {
        $this->container['dispute_amount'] = $dispute_amount;

        return $this;
    }

    /**
     * Gets dispute_booking_entry.
     *
     * @return string|null
     */
    public function getDisputeBookingEntry()
    {
        return $this->container['dispute_booking_entry'];
    }

    /**
     * Sets dispute_booking_entry.
     *
     * @param string|null $dispute_booking_entry The enumeration value indicates whether the dollar amount in the <strong>disputeAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code>, but its possible that <code>CREDIT</code> could be returned if the seller contested one or more payment disputes and won the dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setDisputeBookingEntry($dispute_booking_entry)
    {
        $this->container['dispute_booking_entry'] = $dispute_booking_entry;

        return $this;
    }

    /**
     * Gets dispute_count.
     *
     * @return int|null
     */
    public function getDisputeCount()
    {
        return $this->container['dispute_count'];
    }

    /**
     * Sets dispute_count.
     *
     * @param int|null $dispute_count This integer value indicates the total number of payment disputes that have been initiated by one or more buyers. Only the orders that match the input criteria are considered. The Payment Disputes methods in the Fulfillment API can be used by the seller to retrieve more information about any payment disputes. <br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to any value other than <code>DISPUTE</code>.
     *
     * @return self
     */
    public function setDisputeCount($dispute_count)
    {
        $this->container['dispute_count'] = $dispute_count;

        return $this;
    }

    /**
     * Gets non_sale_charge_amount.
     *
     * @return \TNT\Ebay\Sell\Finances\V1\Model\Amount|null
     */
    public function getNonSaleChargeAmount()
    {
        return $this->container['non_sale_charge_amount'];
    }

    /**
     * Sets non_sale_charge_amount.
     *
     * @param \TNT\Ebay\Sell\Finances\V1\Model\Amount|null $non_sale_charge_amount non_sale_charge_amount
     *
     * @return self
     */
    public function setNonSaleChargeAmount($non_sale_charge_amount)
    {
        $this->container['non_sale_charge_amount'] = $non_sale_charge_amount;

        return $this;
    }

    /**
     * Gets non_sale_charge_booking_entry.
     *
     * @return string|null
     */
    public function getNonSaleChargeBookingEntry()
    {
        return $this->container['non_sale_charge_booking_entry'];
    }

    /**
     * Sets non_sale_charge_booking_entry.
     *
     * @param string|null $non_sale_charge_booking_entry The credit/debit sign indicator for the non-sale charge. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setNonSaleChargeBookingEntry($non_sale_charge_booking_entry)
    {
        $this->container['non_sale_charge_booking_entry'] = $non_sale_charge_booking_entry;

        return $this;
    }

    /**
     * Gets non_sale_charge_count.
     *
     * @return int|null
     */
    public function getNonSaleChargeCount()
    {
        return $this->container['non_sale_charge_count'];
    }

    /**
     * Sets non_sale_charge_count.
     *
     * @param int|null $non_sale_charge_count the total non-sale charge count for given payee within a specified period
     *
     * @return self
     */
    public function setNonSaleChargeCount($non_sale_charge_count)
    {
        $this->container['non_sale_charge_count'] = $non_sale_charge_count;

        return $this;
    }

    /**
     * Gets on_hold_amount.
     *
     * @return \TNT\Ebay\Sell\Finances\V1\Model\Amount|null
     */
    public function getOnHoldAmount()
    {
        return $this->container['on_hold_amount'];
    }

    /**
     * Sets on_hold_amount.
     *
     * @param \TNT\Ebay\Sell\Finances\V1\Model\Amount|null $on_hold_amount on_hold_amount
     *
     * @return self
     */
    public function setOnHoldAmount($on_hold_amount)
    {
        $this->container['on_hold_amount'] = $on_hold_amount;

        return $this;
    }

    /**
     * Gets on_hold_booking_entry.
     *
     * @return string|null
     */
    public function getOnHoldBookingEntry()
    {
        return $this->container['on_hold_booking_entry'];
    }

    /**
     * Sets on_hold_booking_entry.
     *
     * @param string|null $on_hold_booking_entry The enumeration value indicates whether the dollar amount in the <strong>onHoldAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>CREDIT</code>, since on-hold funds should eventually be released as part of a payout to the seller once the hold is cleared. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setOnHoldBookingEntry($on_hold_booking_entry)
    {
        $this->container['on_hold_booking_entry'] = $on_hold_booking_entry;

        return $this;
    }

    /**
     * Gets on_hold_count.
     *
     * @return int|null
     */
    public function getOnHoldCount()
    {
        return $this->container['on_hold_count'];
    }

    /**
     * Sets on_hold_count.
     *
     * @param int|null $on_hold_count This integer value indicates the total number of order sales where the associated funds are on hold. Only the orders that match the input criteria are considered.<br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionStatus</strong> filter is used, and its value is set to any value other than <code>FUNDS_ON_HOLD</code>.
     *
     * @return self
     */
    public function setOnHoldCount($on_hold_count)
    {
        $this->container['on_hold_count'] = $on_hold_count;

        return $this;
    }

    /**
     * Gets refund_amount.
     *
     * @return \TNT\Ebay\Sell\Finances\V1\Model\Amount|null
     */
    public function getRefundAmount()
    {
        return $this->container['refund_amount'];
    }

    /**
     * Sets refund_amount.
     *
     * @param \TNT\Ebay\Sell\Finances\V1\Model\Amount|null $refund_amount refund_amount
     *
     * @return self
     */
    public function setRefundAmount($refund_amount)
    {
        $this->container['refund_amount'] = $refund_amount;

        return $this;
    }

    /**
     * Gets refund_booking_entry.
     *
     * @return string|null
     */
    public function getRefundBookingEntry()
    {
        return $this->container['refund_booking_entry'];
    }

    /**
     * Sets refund_booking_entry.
     *
     * @param string|null $refund_booking_entry The enumeration value indicates whether the dollar amount in the <strong>refundAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code> since this a refund from the seller to the buyer. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setRefundBookingEntry($refund_booking_entry)
    {
        $this->container['refund_booking_entry'] = $refund_booking_entry;

        return $this;
    }

    /**
     * Gets refund_count.
     *
     * @return int|null
     */
    public function getRefundCount()
    {
        return $this->container['refund_count'];
    }

    /**
     * Sets refund_count.
     *
     * @param int|null $refund_count This integer value indicates the total number of buyer refunds that match the input criteria. <br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to any value other than <code>REFUND</code>.
     *
     * @return self
     */
    public function setRefundCount($refund_count)
    {
        $this->container['refund_count'] = $refund_count;

        return $this;
    }

    /**
     * Gets shipping_label_amount.
     *
     * @return \TNT\Ebay\Sell\Finances\V1\Model\Amount|null
     */
    public function getShippingLabelAmount()
    {
        return $this->container['shipping_label_amount'];
    }

    /**
     * Sets shipping_label_amount.
     *
     * @param \TNT\Ebay\Sell\Finances\V1\Model\Amount|null $shipping_label_amount shipping_label_amount
     *
     * @return self
     */
    public function setShippingLabelAmount($shipping_label_amount)
    {
        $this->container['shipping_label_amount'] = $shipping_label_amount;

        return $this;
    }

    /**
     * Gets shipping_label_booking_entry.
     *
     * @return string|null
     */
    public function getShippingLabelBookingEntry()
    {
        return $this->container['shipping_label_booking_entry'];
    }

    /**
     * Sets shipping_label_booking_entry.
     *
     * @param string|null $shipping_label_booking_entry The enumeration value indicates whether the dollar amount in the <strong>shippingLabelAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code>, as eBay will charge the seller when eBay shipping labels are purchased, but it can be <code>CREDIT</code> if the seller was refunded for a shipping label or was possibly overcharged for a shipping label. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setShippingLabelBookingEntry($shipping_label_booking_entry)
    {
        $this->container['shipping_label_booking_entry'] = $shipping_label_booking_entry;

        return $this;
    }

    /**
     * Gets shipping_label_count.
     *
     * @return int|null
     */
    public function getShippingLabelCount()
    {
        return $this->container['shipping_label_count'];
    }

    /**
     * Sets shipping_label_count.
     *
     * @param int|null $shipping_label_count This is the total number of eBay shipping labels purchased by the seller. The count returned here may depend on the specified input criteria.
     *
     * @return self
     */
    public function setShippingLabelCount($shipping_label_count)
    {
        $this->container['shipping_label_count'] = $shipping_label_count;

        return $this;
    }

    /**
     * Gets transfer_amount.
     *
     * @return \TNT\Ebay\Sell\Finances\V1\Model\Amount|null
     */
    public function getTransferAmount()
    {
        return $this->container['transfer_amount'];
    }

    /**
     * Sets transfer_amount.
     *
     * @param \TNT\Ebay\Sell\Finances\V1\Model\Amount|null $transfer_amount transfer_amount
     *
     * @return self
     */
    public function setTransferAmount($transfer_amount)
    {
        $this->container['transfer_amount'] = $transfer_amount;

        return $this;
    }

    /**
     * Gets transfer_booking_entry.
     *
     * @return string|null
     */
    public function getTransferBookingEntry()
    {
        return $this->container['transfer_booking_entry'];
    }

    /**
     * Sets transfer_booking_entry.
     *
     * @param string|null $transfer_booking_entry The enumeration value indicates whether the dollar amount in the <strong>transferAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code> since this a seller reimbursement to eBay for buyer refunds. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setTransferBookingEntry($transfer_booking_entry)
    {
        $this->container['transfer_booking_entry'] = $transfer_booking_entry;

        return $this;
    }

    /**
     * Gets transfer_count.
     *
     * @return int|null
     */
    public function getTransferCount()
    {
        return $this->container['transfer_count'];
    }

    /**
     * Sets transfer_count.
     *
     * @param int|null $transfer_count This integer value indicates the total number of buyer refund transfers that match the input criteria. <br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to any value other than <code>TRANSFER</code>.
     *
     * @return self
     */
    public function setTransferCount($transfer_count)
    {
        $this->container['transfer_count'] = $transfer_count;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
