<?php

/**
 * This file is part of the brandon14/ebay-sdk-php package.
 *
 * MIT License
 *
 * Copyright (c) 2022 Brandon Clothier
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

declare(strict_types=1);

/**
 * ReportTask.
 *
 * PHP version ^7.2 || ^8.0
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Marketing API.
 *
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, see <a href=\"/api-docs/sell/static/marketing/promoted-listings.html\">Promoted Listings</a>.</li>  <li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.10.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TNT\Ebay\Sell\Marketing\V1\Model;

use ArrayAccess;
use TNT\Ebay\Sell\Marketing\V1\ObjectSerializer;

/**
 * ReportTask Class Doc Comment.
 *
 * @category Class
 * @description This type defines the fields in a report task.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ReportTask implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'ReportTask';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'campaign_ids' => 'string[]',
        'date_from' => 'string',
        'date_to' => 'string',
        'dimensions' => '\TNT\Ebay\Sell\Marketing\V1\Model\Dimension[]',
        'inventory_references' => '\TNT\Ebay\Sell\Marketing\V1\Model\InventoryReference[]',
        'listing_ids' => 'string[]',
        'marketplace_id' => 'string',
        'metric_keys' => 'string[]',
        'report_expiration_date' => 'string',
        'report_format' => 'string',
        'report_href' => 'string',
        'report_id' => 'string',
        'report_name' => 'string',
        'report_task_completion_date' => 'string',
        'report_task_creation_date' => 'string',
        'report_task_expected_completion_date' => 'string',
        'report_task_id' => 'string',
        'report_task_status' => 'string',
        'report_task_status_message' => 'string',
        'report_type' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'campaign_ids' => null,
        'date_from' => null,
        'date_to' => null,
        'dimensions' => null,
        'inventory_references' => null,
        'listing_ids' => null,
        'marketplace_id' => null,
        'metric_keys' => null,
        'report_expiration_date' => null,
        'report_format' => null,
        'report_href' => null,
        'report_id' => null,
        'report_name' => null,
        'report_task_completion_date' => null,
        'report_task_creation_date' => null,
        'report_task_expected_completion_date' => null,
        'report_task_id' => null,
        'report_task_status' => null,
        'report_task_status_message' => null,
        'report_type' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_ids' => 'campaignIds',
        'date_from' => 'dateFrom',
        'date_to' => 'dateTo',
        'dimensions' => 'dimensions',
        'inventory_references' => 'inventoryReferences',
        'listing_ids' => 'listingIds',
        'marketplace_id' => 'marketplaceId',
        'metric_keys' => 'metricKeys',
        'report_expiration_date' => 'reportExpirationDate',
        'report_format' => 'reportFormat',
        'report_href' => 'reportHref',
        'report_id' => 'reportId',
        'report_name' => 'reportName',
        'report_task_completion_date' => 'reportTaskCompletionDate',
        'report_task_creation_date' => 'reportTaskCreationDate',
        'report_task_expected_completion_date' => 'reportTaskExpectedCompletionDate',
        'report_task_id' => 'reportTaskId',
        'report_task_status' => 'reportTaskStatus',
        'report_task_status_message' => 'reportTaskStatusMessage',
        'report_type' => 'reportType',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_ids' => 'setCampaignIds',
        'date_from' => 'setDateFrom',
        'date_to' => 'setDateTo',
        'dimensions' => 'setDimensions',
        'inventory_references' => 'setInventoryReferences',
        'listing_ids' => 'setListingIds',
        'marketplace_id' => 'setMarketplaceId',
        'metric_keys' => 'setMetricKeys',
        'report_expiration_date' => 'setReportExpirationDate',
        'report_format' => 'setReportFormat',
        'report_href' => 'setReportHref',
        'report_id' => 'setReportId',
        'report_name' => 'setReportName',
        'report_task_completion_date' => 'setReportTaskCompletionDate',
        'report_task_creation_date' => 'setReportTaskCreationDate',
        'report_task_expected_completion_date' => 'setReportTaskExpectedCompletionDate',
        'report_task_id' => 'setReportTaskId',
        'report_task_status' => 'setReportTaskStatus',
        'report_task_status_message' => 'setReportTaskStatusMessage',
        'report_type' => 'setReportType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_ids' => 'getCampaignIds',
        'date_from' => 'getDateFrom',
        'date_to' => 'getDateTo',
        'dimensions' => 'getDimensions',
        'inventory_references' => 'getInventoryReferences',
        'listing_ids' => 'getListingIds',
        'marketplace_id' => 'getMarketplaceId',
        'metric_keys' => 'getMetricKeys',
        'report_expiration_date' => 'getReportExpirationDate',
        'report_format' => 'getReportFormat',
        'report_href' => 'getReportHref',
        'report_id' => 'getReportId',
        'report_name' => 'getReportName',
        'report_task_completion_date' => 'getReportTaskCompletionDate',
        'report_task_creation_date' => 'getReportTaskCreationDate',
        'report_task_expected_completion_date' => 'getReportTaskExpectedCompletionDate',
        'report_task_id' => 'getReportTaskId',
        'report_task_status' => 'getReportTaskStatus',
        'report_task_status_message' => 'getReportTaskStatusMessage',
        'report_type' => 'getReportType',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['campaign_ids'] = $data['campaign_ids'] ?? null;
        $this->container['date_from'] = $data['date_from'] ?? null;
        $this->container['date_to'] = $data['date_to'] ?? null;
        $this->container['dimensions'] = $data['dimensions'] ?? null;
        $this->container['inventory_references'] = $data['inventory_references'] ?? null;
        $this->container['listing_ids'] = $data['listing_ids'] ?? null;
        $this->container['marketplace_id'] = $data['marketplace_id'] ?? null;
        $this->container['metric_keys'] = $data['metric_keys'] ?? null;
        $this->container['report_expiration_date'] = $data['report_expiration_date'] ?? null;
        $this->container['report_format'] = $data['report_format'] ?? null;
        $this->container['report_href'] = $data['report_href'] ?? null;
        $this->container['report_id'] = $data['report_id'] ?? null;
        $this->container['report_name'] = $data['report_name'] ?? null;
        $this->container['report_task_completion_date'] = $data['report_task_completion_date'] ?? null;
        $this->container['report_task_creation_date'] = $data['report_task_creation_date'] ?? null;
        $this->container['report_task_expected_completion_date'] = $data['report_task_expected_completion_date'] ?? null;
        $this->container['report_task_id'] = $data['report_task_id'] ?? null;
        $this->container['report_task_status'] = $data['report_task_status'] ?? null;
        $this->container['report_task_status_message'] = $data['report_task_status_message'] ?? null;
        $this->container['report_type'] = $data['report_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets campaign_ids.
     *
     * @return string[]|null
     */
    public function getCampaignIds()
    {
        return $this->container['campaign_ids'];
    }

    /**
     * Sets campaign_ids.
     *
     * @param string[]|null $campaign_ids A list of campaign IDs to be included in the report. A campaign ID is a unique eBay-assigned identifier of the campaign that's generated when the campaign is created. Call <b>getCampaigns</b> to return the current campaign IDs for a seller.  <br><br><p class=\"tablenote\"><b>Note: </b> Currently, you can specify only one campaign ID.
     *
     * @return self
     */
    public function setCampaignIds($campaign_ids)
    {
        $this->container['campaign_ids'] = $campaign_ids;

        return $this;
    }

    /**
     * Gets date_from.
     *
     * @return string|null
     */
    public function getDateFrom()
    {
        return $this->container['date_from'];
    }

    /**
     * Sets date_from.
     *
     * @param string|null $date_from The date defining the start of the timespan covered by the report, formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> timestamp.
     *
     * @return self
     */
    public function setDateFrom($date_from)
    {
        $this->container['date_from'] = $date_from;

        return $this;
    }

    /**
     * Gets date_to.
     *
     * @return string|null
     */
    public function getDateTo()
    {
        return $this->container['date_to'];
    }

    /**
     * Sets date_to.
     *
     * @param string|null $date_to The date defining the end of the timespan covered by the report, formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> timestamp.
     *
     * @return self
     */
    public function setDateTo($date_to)
    {
        $this->container['date_to'] = $date_to;

        return $this;
    }

    /**
     * Gets dimensions.
     *
     * @return \TNT\Ebay\Sell\Marketing\V1\Model\Dimension[]|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions.
     *
     * @param \TNT\Ebay\Sell\Marketing\V1\Model\Dimension[]|null $dimensions a list containing the dimension in the report
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets inventory_references.
     *
     * @return \TNT\Ebay\Sell\Marketing\V1\Model\InventoryReference[]|null
     */
    public function getInventoryReferences()
    {
        return $this->container['inventory_references'];
    }

    /**
     * Sets inventory_references.
     *
     * @param \TNT\Ebay\Sell\Marketing\V1\Model\InventoryReference[]|null $inventory_references If supplied in the request, this field returns a list of the seller's inventory reference IDs included in the report.  <p>Each item is referenced by a pair of <inventoryRefernceID</b> and <b>inventoryReferenceType</b> values, where an inventory reference ID can be either a seller-defined <b>SKU</b> value or an <b>inventoryItemGroupKey</b>. An <b>inventoryItemGroupKey</b> is seller-defined ID for an inventory item group (a multiple-variation listing), and is created and used by the <a href=\"/api-docs/sell/inventory/resources/methods\">Inventory API</a>.</p>
     *
     * @return self
     */
    public function setInventoryReferences($inventory_references)
    {
        $this->container['inventory_references'] = $inventory_references;

        return $this;
    }

    /**
     * Gets listing_ids.
     *
     * @return string[]|null
     */
    public function getListingIds()
    {
        return $this->container['listing_ids'];
    }

    /**
     * Sets listing_ids.
     *
     * @param string[]|null $listing_ids If supplied in the request, this field returns a list of the listing IDs included in the report. A listing ID is an eBay-assigned ID that's generated when a listing is created.
     *
     * @return self
     */
    public function setListingIds($listing_ids)
    {
        $this->container['listing_ids'] = $listing_ids;

        return $this;
    }

    /**
     * Gets marketplace_id.
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplace_id'];
    }

    /**
     * Sets marketplace_id.
     *
     * @param string|null $marketplace_id The ID of the eBay marketplace used by the report task. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setMarketplaceId($marketplace_id)
    {
        $this->container['marketplace_id'] = $marketplace_id;

        return $this;
    }

    /**
     * Gets metric_keys.
     *
     * @return string[]|null
     */
    public function getMetricKeys()
    {
        return $this->container['metric_keys'];
    }

    /**
     * Sets metric_keys.
     *
     * @param string[]|null $metric_keys a list of metrics for the report task
     *
     * @return self
     */
    public function setMetricKeys($metric_keys)
    {
        $this->container['metric_keys'] = $metric_keys;

        return $this;
    }

    /**
     * Gets report_expiration_date.
     *
     * @return string|null
     */
    public function getReportExpirationDate()
    {
        return $this->container['report_expiration_date'];
    }

    /**
     * Sets report_expiration_date.
     *
     * @param string|null $report_expiration_date The date after which the report is no longer be available. Reports are available for 30 days and you cannot download a report after it has expired.  <br><br><b>Format (UTC): </b> yyyy-MM-ddThh:mm:ss.sssZ
     *
     * @return self
     */
    public function setReportExpirationDate($report_expiration_date)
    {
        $this->container['report_expiration_date'] = $report_expiration_date;

        return $this;
    }

    /**
     * Gets report_format.
     *
     * @return string|null
     */
    public function getReportFormat()
    {
        return $this->container['report_format'];
    }

    /**
     * Sets report_format.
     *
     * @param string|null $report_format Indicates the format of the report. Currently, only <code>TSV_GZIP</code> is supported. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportFormatEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setReportFormat($report_format)
    {
        $this->container['report_format'] = $report_format;

        return $this;
    }

    /**
     * Gets report_href.
     *
     * @return string|null
     */
    public function getReportHref()
    {
        return $this->container['report_href'];
    }

    /**
     * Sets report_href.
     *
     * @param string|null $report_href the URL of the generated report, which can be used to download the report once it has been generated
     *
     * @return self
     */
    public function setReportHref($report_href)
    {
        $this->container['report_href'] = $report_href;

        return $this;
    }

    /**
     * Gets report_id.
     *
     * @return string|null
     */
    public function getReportId()
    {
        return $this->container['report_id'];
    }

    /**
     * Sets report_id.
     *
     * @param string|null $report_id a unique eBay-assigned ID for the report
     *
     * @return self
     */
    public function setReportId($report_id)
    {
        $this->container['report_id'] = $report_id;

        return $this;
    }

    /**
     * Gets report_name.
     *
     * @return string|null
     */
    public function getReportName()
    {
        return $this->container['report_name'];
    }

    /**
     * Sets report_name.
     *
     * @param string|null $report_name An eBay-assigned name for the report that's created by the <b>createReportTask</b> call. This name is unique for the seller.
     *
     * @return self
     */
    public function setReportName($report_name)
    {
        $this->container['report_name'] = $report_name;

        return $this;
    }

    /**
     * Gets report_task_completion_date.
     *
     * @return string|null
     */
    public function getReportTaskCompletionDate()
    {
        return $this->container['report_task_completion_date'];
    }

    /**
     * Sets report_task_completion_date.
     *
     * @param string|null $report_task_completion_date The date the report task completed the report generation.  <br><br><b>Format (UTC): </b> yyyy-MM-ddThh:mm:ss.sssZ
     *
     * @return self
     */
    public function setReportTaskCompletionDate($report_task_completion_date)
    {
        $this->container['report_task_completion_date'] = $report_task_completion_date;

        return $this;
    }

    /**
     * Gets report_task_creation_date.
     *
     * @return string|null
     */
    public function getReportTaskCreationDate()
    {
        return $this->container['report_task_creation_date'];
    }

    /**
     * Sets report_task_creation_date.
     *
     * @param string|null $report_task_creation_date The date the report task was created.  <br><br><b>Format (UTC): </b> yyyy-MM-ddThh:mm:ss.sssZ
     *
     * @return self
     */
    public function setReportTaskCreationDate($report_task_creation_date)
    {
        $this->container['report_task_creation_date'] = $report_task_creation_date;

        return $this;
    }

    /**
     * Gets report_task_expected_completion_date.
     *
     * @return string|null
     */
    public function getReportTaskExpectedCompletionDate()
    {
        return $this->container['report_task_expected_completion_date'];
    }

    /**
     * Sets report_task_expected_completion_date.
     *
     * @param string|null $report_task_expected_completion_date The date the report task is expected to complete the report generation.  <br><br><b>Format (UTC): </b> yyyy-MM-ddThh:mm:ss.sssZ
     *
     * @return self
     */
    public function setReportTaskExpectedCompletionDate($report_task_expected_completion_date)
    {
        $this->container['report_task_expected_completion_date'] = $report_task_expected_completion_date;

        return $this;
    }

    /**
     * Gets report_task_id.
     *
     * @return string|null
     */
    public function getReportTaskId()
    {
        return $this->container['report_task_id'];
    }

    /**
     * Sets report_task_id.
     *
     * @param string|null $report_task_id The unique eBay-assigned ID of the report task. This value is generated when the report task is created with a call to <b>createReportTask</b>.
     *
     * @return self
     */
    public function setReportTaskId($report_task_id)
    {
        $this->container['report_task_id'] = $report_task_id;

        return $this;
    }

    /**
     * Gets report_task_status.
     *
     * @return string|null
     */
    public function getReportTaskStatus()
    {
        return $this->container['report_task_status'];
    }

    /**
     * Sets report_task_status.
     *
     * @param string|null $report_task_status Indicates the current state of the report task. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/plr:TaskStatusEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setReportTaskStatus($report_task_status)
    {
        $this->container['report_task_status'] = $report_task_status;

        return $this;
    }

    /**
     * Gets report_task_status_message.
     *
     * @return string|null
     */
    public function getReportTaskStatusMessage()
    {
        return $this->container['report_task_status_message'];
    }

    /**
     * Sets report_task_status_message.
     *
     * @param string|null $report_task_status_message a status message with additional information about the report task
     *
     * @return self
     */
    public function setReportTaskStatusMessage($report_task_status_message)
    {
        $this->container['report_task_status_message'] = $report_task_status_message;

        return $this;
    }

    /**
     * Gets report_type.
     *
     * @return string|null
     */
    public function getReportType()
    {
        return $this->container['report_type'];
    }

    /**
     * Sets report_type.
     *
     * @param string|null $report_type Indicates type of report associated with the report task. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportTypeEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setReportType($report_type)
    {
        $this->container['report_type'] = $report_type;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
