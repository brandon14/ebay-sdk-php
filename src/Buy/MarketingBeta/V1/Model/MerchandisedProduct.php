<?php

/**
 * This file is part of the trollandtoad/ebay-sdk-php package.
 *
 * MIT License
 *
 * Copyright (c) 2022 Brandon Clothier
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

declare(strict_types=1);

/**
 * MerchandisedProduct.
 *
 * PHP version ^7.2 || ^8.0
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Buy Marketing API.
 *
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TNT\Ebay\Buy\MarketingBeta\V1\Model;

use TNT\Ebay\Buy\MarketingBeta\V1\ObjectSerializer;

/**
 * MerchandisedProduct Class Doc Comment.
 *
 * @category Class
 *
 * @description The type that defines the fields for product information, including price, condition, ratings, etc.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MerchandisedProduct implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'MerchandisedProduct';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'average_rating' => 'string',
        'epid' => 'string',
        'image' => '\TNT\Ebay\Buy\MarketingBeta\V1\Model\Image',
        'market_price_details' => '\TNT\Ebay\Buy\MarketingBeta\V1\Model\MarketPriceDetail[]',
        'rating_aspects' => '\TNT\Ebay\Buy\MarketingBeta\V1\Model\RatingAspect[]',
        'rating_count' => 'int',
        'review_count' => 'int',
        'title' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'average_rating' => null,
        'epid' => null,
        'image' => null,
        'market_price_details' => null,
        'rating_aspects' => null,
        'rating_count' => 'int32',
        'review_count' => 'int32',
        'title' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'average_rating' => 'averageRating',
        'epid' => 'epid',
        'image' => 'image',
        'market_price_details' => 'marketPriceDetails',
        'rating_aspects' => 'ratingAspects',
        'rating_count' => 'ratingCount',
        'review_count' => 'reviewCount',
        'title' => 'title',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'average_rating' => 'setAverageRating',
        'epid' => 'setEpid',
        'image' => 'setImage',
        'market_price_details' => 'setMarketPriceDetails',
        'rating_aspects' => 'setRatingAspects',
        'rating_count' => 'setRatingCount',
        'review_count' => 'setReviewCount',
        'title' => 'setTitle',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'average_rating' => 'getAverageRating',
        'epid' => 'getEpid',
        'image' => 'getImage',
        'market_price_details' => 'getMarketPriceDetails',
        'rating_aspects' => 'getRatingAspects',
        'rating_count' => 'getRatingCount',
        'review_count' => 'getReviewCount',
        'title' => 'getTitle',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['average_rating'] = $data['average_rating'] ?? null;
        $this->container['epid'] = $data['epid'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['market_price_details'] = $data['market_price_details'] ?? null;
        $this->container['rating_aspects'] = $data['rating_aspects'] ?? null;
        $this->container['rating_count'] = $data['rating_count'] ?? null;
        $this->container['review_count'] = $data['review_count'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets average_rating.
     *
     * @return string|null
     */
    public function getAverageRating()
    {
        return $this->container['average_rating'];
    }

    /**
     * Sets average_rating.
     *
     * @param string|null $average_rating the average rating for the product based on eBay user ratings
     *
     * @return self
     */
    public function setAverageRating($average_rating)
    {
        $this->container['average_rating'] = $average_rating;

        return $this;
    }

    /**
     * Gets epid.
     *
     * @return string|null
     */
    public function getEpid()
    {
        return $this->container['epid'];
    }

    /**
     * Sets epid.
     *
     * @param string|null $epid The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API <b>search</b> method to retrieve items for this product.
     *
     * @return self
     */
    public function setEpid($epid)
    {
        $this->container['epid'] = $epid;

        return $this;
    }

    /**
     * Gets image.
     *
     * @return \TNT\Ebay\Buy\MarketingBeta\V1\Model\Image|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image.
     *
     * @param \TNT\Ebay\Buy\MarketingBeta\V1\Model\Image|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets market_price_details.
     *
     * @return \TNT\Ebay\Buy\MarketingBeta\V1\Model\MarketPriceDetail[]|null
     */
    public function getMarketPriceDetails()
    {
        return $this->container['market_price_details'];
    }

    /**
     * Sets market_price_details.
     *
     * @param \TNT\Ebay\Buy\MarketingBeta\V1\Model\MarketPriceDetail[]|null $market_price_details an array of containers for the product market price details, such as condition and market price
     *
     * @return self
     */
    public function setMarketPriceDetails($market_price_details)
    {
        $this->container['market_price_details'] = $market_price_details;

        return $this;
    }

    /**
     * Gets rating_aspects.
     *
     * @return \TNT\Ebay\Buy\MarketingBeta\V1\Model\RatingAspect[]|null
     */
    public function getRatingAspects()
    {
        return $this->container['rating_aspects'];
    }

    /**
     * Sets rating_aspects.
     *
     * @param \TNT\Ebay\Buy\MarketingBeta\V1\Model\RatingAspect[]|null $rating_aspects an array of containers for ratings of the product aspects, such as \"Is it a good value\"
     *
     * @return self
     */
    public function setRatingAspects($rating_aspects)
    {
        $this->container['rating_aspects'] = $rating_aspects;

        return $this;
    }

    /**
     * Gets rating_count.
     *
     * @return int|null
     */
    public function getRatingCount()
    {
        return $this->container['rating_count'];
    }

    /**
     * Sets rating_count.
     *
     * @param int|null $rating_count the total number of eBay users that rated the product
     *
     * @return self
     */
    public function setRatingCount($rating_count)
    {
        $this->container['rating_count'] = $rating_count;

        return $this;
    }

    /**
     * Gets review_count.
     *
     * @return int|null
     */
    public function getReviewCount()
    {
        return $this->container['review_count'];
    }

    /**
     * Sets review_count.
     *
     * @param int|null $review_count the total number of eBay users that wrote a review for the product
     *
     * @return self
     */
    public function setReviewCount($review_count)
    {
        $this->container['review_count'] = $review_count;

        return $this;
    }

    /**
     * Gets title.
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title.
     *
     * @param string|null $title the title of the product
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
